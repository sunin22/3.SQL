### SQL Practice
### 2019 10 20 - 2019 10 25
### Sunin Choi

## 1. line_item
# Select the entire line_item table
SELECT *
	FROM line_item;

# Select only the first 10 rows from the line_item table
select *
	from line_item limit 10;

# Select only the columns sku, unit_price and date from the line_item table (and only the first 10 rows)
select sku, unit_price, date
	from line_item limit 10;

# Count the total number of rows of the line_item table = 293,983
select count(*)
	from line_item;

# Count the total number of unique "sku" from the line_item table = 7,951 / 293,983
select count(distinct sku)
	from line_item;

select count(sku)
	from line_item;

# Generate a list with the average price of each sku
select sum(sku)/count(sku) AS avg_sku
	from line_item;
    
SELECT sku, AVG(unit_price) AS avg_price
  FROM line_item
  group by sku desc;

# name the average price "avg_price", and sort the list that you by that column (bigger to smaller price)
SELECT sku, AVG(unit_price) AS avg_price
  FROM line_item
  group by sku
  ORDER BY avg_price DESC limit 100; 
  
select id_order, sku, max(product_quantity) as max_quantity
	from line_item
    group by id_order, sku, product_quantity
    ORDER BY product_quantity DESC limit 100; 
    
# Which products were bought in largest quantities?
select *
	from line_item
    where product_quantity = (select max(product_quantity) from line_item);

# select the 100 lines with the biggest "product quantity"
select *
	from line_item
    ORDER BY product_quantity DESC limit 100;
    
# select their stock keeping unit" and product quantity?
select product_quantity, sku
	from line_item;
  
  
## 2. orders
# How many orders were placed in total?
select count(*)
	from orders;

# Make a count of orders by their state
select state, count(state)
	from orders
    group by state;

# Select all the orders placed in January of 2017
select *
	from orders
    where created_date between '2017-01-01' and '2017-01-31';
    
# How many orders were placed in January of 2017?
select count(*)
	from orders
    where created_date between '2017-01-01' and '2017-01-31';
 
# How many orders were cancelled on January 4th 2017? 
select count(*)
	from orders
    where date(created_date) = '2017-01-04' and state = "Cancelled";

# How many orders have been placed each month of the year? 
select  year(created_date) as years, month(created_date) as month_name, count(id_order)
	from orders
    group by year(created_date), month(created_date);
    
                  
# What is the total amount paid in all the orders?				
select cast(sum(total_paid) as decimal(11,2))
	from orders;
   
# What is the average amount paid per order?
# Give a result to the previous question with only 2 decimals
select cast(avg(total_paid) as decimal(5,2))
	from orders;

# What is the date of the newest order? And the oldest?
select min(created_date)
	from orders;
    
select max(created_date)
	from orders;

# What is the day with the highest amount of completed orders 
# (and how many completed orders were placed that day)? (??)  
select year(created_date), month(created_date), day(created_date), count(*) as counts
	from orders where state = "completed"  
    group by year(created_date), month(created_date), day(created_date) 
	order by counts DESC limit 1;

# What is the day with the highest amount paid (and how much was paid that day)?
select created_date, total_paid
	from orders
    where total_paid in(select max(total_paid) from orders);
    
    
## 3. Products
# How many products are there?
select count(*)
	from products;

# How many brands?
select count(distinct brand) 
	from products; 
    
select brand, count(brand)
	from products
    group by brand;  
    
# How many categories?
select count(distinct manual_categories)
	from products;

# How many products per brand & products per category?
select brand, count(ProductId)
	from products
    group by brand;
    
select manual_categories, count(ProductId)
	from products
    group by manual_categories;

# What's the average price per brand and the average price per category?
select manual_categories, avg(price)
	from products
    group by manual_categories;
    
select brand, avg(price)
	from products
    group by brand;
    
select brand, manual_categories, max(price)
	from products
    group by brand, manual_categories
    order by max(price) desc;
    
# What's the name and description of the most expensive product per brand and per category?
select max(price), brand
	from products
    where price in(select max(price) from products)
    group by brand;

select max(price), manual_categories
	from products
    where price in(select max(price) from products)
    group by manual_categories;
    
select name_en, short_desc_en, price
	from products
    where price in(select max(price) from products);
  
  
 ## Join
 # Query 1 & 2
select li.sku, name_en, manual_categories, unit_price, price, price - unit_price as price_difference, date
	from line_item as li
    inner join products as pro
    on li.sku = pro.sku;

# Query 3
select manual_categories, avg(price - unit_price) as price_difference
	from line_item as li
    inner join products as pro
	on li.sku = pro.sku
    group by manual_categories;
    
select manual_categories, sum(price - unit_price) as price_difference
	from line_item as li
    inner join products as pro
	on li.sku = pro.sku
    group by manual_categories;
    
# Query 4
select brand, avg(price - unit_price) as price_difference
	from line_item as li
    inner join products as pro
	on li.sku = pro.sku
    group by brand;
    
select brand, sum(price - unit_price) as price_difference
	from line_item as li
    inner join products as pro
	on li.sku = pro.sku
    group by brand;

# Query 5
select manual_categories, avg(price - unit_price) as price_difference
	from line_item as li
    inner join products as pro
	on li.sku = pro.sku
    group by manual_categories having price_difference > 50000 order by price_difference desc;
    
# Query 6
select li.sku, li.id_order, created_date, state, total_paid, manual_categories, brand
	from line_item as li
    inner join orders as ord
    on li.id_order = ord.id_order
    inner join products as pd
    on li.sku = pd.sku;

# Query 7
select pd.brand, count(li.id_order)
	from line_item as li
    inner join orders as ord
    on li.id_order = ord.id_order
    inner join products as pd
    on li.sku = pd.sku 
	group by pd.brand;

select count(li.sku), state, brand
	from line_item as li
    inner join orders as ord
    on li.id_order = ord.id_order
    inner join products as pd
    on li.sku = pd.sku 
	group by brand;
    
# Query 8
select pd.brand, count(li.id_order) AS orders_by_brand
	from line_item as li
    inner join orders as ord
    on li.id_order = ord.id_order
    inner join products as pd
    on li.sku = pd.sku 
	where ord.state = 'Cancelled'
	group by pd.brand
    having orders_by_brand > 100;
    
 
## Get insights of employees
# 1. What is the employee id of the highest paid employee?
select emp_id, max(salary)
	from salaries;

# 2. What is the name of youngest employee ?
select max(birth_date), first_name, last_name
	from employees;
    
# 3. What is the name of the first hired employee ? (???)
select min(emp_id), first_name, last_name, hire_date
	from employees;
    
# 4. What percentage of employees are Female ?
SELECT gender, 
    (SUM(CASE WHEN gender='F' THEN 1 ELSE 0 END)/COUNT(*))*100 as female_percent
	FROM employees;

SELECT SUM(CASE WHEN gender='F' THEN 1 ELSE 0 END)/COUNT(*)*100 as female_percent
	FROM employees;
    
select count(gender)  # 135,369
	from employees;
  
select count(gender)  # 135,369
	from employees;

# 5. Show the employee count by department name wise, sorted alphabetically on department name.
select dp.dept_name as department_name, count(de.emp_id) as employee_count 
	from dept_emp as de
    inner join departments as dp
    on de.dept_no = dp.dept_no
    group by department_name
    order by department_name asc;
    
 # 6. Count the number of employees by each calendar year (take the value of year from from_date)
 select year(from_date) as calendar_year, count(emp_id) as employee_count
	from dept_emp
    group by year(from_date)
    order by year(from_date) desc;

# 7. Count the number of employees by each calendar year (take the value of year from from_date) 
# ordered by calendar year exlcuding all years before 1990.
# Divide the employee count based on gender.
select year(de.from_date) as calendar_year, gender, count(em.emp_id) as employee_count 
	from dept_emp as de     #count(de.emp_id) 57221 or (em.emp_id)57221 are they different? 
    inner join employees as em
    on de.emp_id = em.emp_id
    group by calendar_year, gender
    order by calendar_year asc;
    
#8. What is the number of managers hired each calendar year
select year(from_date) as calender_year, count(emp_id) as managers
	from dept_manager
    group by calender_year
    order by calender_year asc;
    
# 9. What will be the department wise break up of managers ?
select year(dm.from_date) as calendar_year, dp.dept_name as department_name, count(dm.emp_id) as employee
	from departments as dp    
    inner join dept_manager as dm
    on dp.dept_no = dm.dept_no
    group by calendar_year, department_name
    order by calendar_year asc;

# 10. What is the number of male managers and female managers hired each calendar year from the year 1990 onwards?
select year(dm.from_date) as calendar_year, em.gender as gender, count(dm.emp_id) as managers
	from departments as dp    
    inner join dept_manager as dm
    on dp.dept_no = dm.dept_no
    inner join employees as em
    on em.emp_id = dm.emp_id
    where year(dm.from_date) >= 1990
    group by calendar_year, gender
    order by calendar_year asc;
